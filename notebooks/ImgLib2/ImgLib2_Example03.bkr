{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "TeX",
            "plugin": "TeX",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            },
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n"
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            },
            "languageVersion": "ES2015"
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "graxxia.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.GradientColor\ncom.twosigma.beaker.chart.legend.*\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.chart.categoryplot.*\ncom.twosigma.beaker.chart.categoryplot.plotitem.*\ncom.twosigma.beaker.chart.histogram.*\ncom.twosigma.beaker.chart.treemap.*\ncom.twosigma.beaker.chart.treemap.util.*\nnet.sf.jtreemap.swing.*\ncom.twosigma.beaker.chart.heatmap.HeatMap\ncom.twosigma.beaker.chart.KeyboardCodes\ncom.twosigma.beaker.jvm.object.*\ncom.twosigma.beaker.easyform.*\ncom.twosigma.beaker.easyform.formitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "ImgLib2 \n\nExample 03: Writing generic algorithms",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "markdown9dHd5C",
            "type": "markdown",
            "body": [
                "**Imglib2 Examples 01 and 02** tried to introduce important tools you need in order to implement algorithms with ImgLib2. This example will show three generic implementations of algorithms computing the min/max, average, as well as the center of mass.",
                "",
                "The core idea is to implement algorithms as generic as possible in order to maximize code-*reusability.* In general, a good way to start is to think: What are the minimal requirements in order to implement algorithm X? This applies to all of the following three concepts:",
                "",
                "* **Type**: You should always use the most abstract [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html) possible, i.e. the one that just offers enough operations to perform your goal. In this way, the algorithm will be able to run on [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html)s you might not even have thought about when implementing it. A good example is the min&max search in example 3a. Instead of implementing it for [FloatType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/real/FloatType.html) or the more abstract [RealType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/RealType.html), we implement it for the even more abstract [Comparable](https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html) & [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html).",
                "* **Image data**: Every algorithm should only demand those interfaces that it requires, not specific implementations of it like [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html). You might require [RandomAccessible](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccessible.html) (infinite), [RandomAccessibleInterval](http://javadoc.imagej.net/ImgLib2/net/imglib2/RandomAccessibleInterval.html) (finite), [Iterable](http://javadoc.imagej.net/Java/java/lang/Iterable.html?is-external=true) (values without location), [IterableInterval](http://javadoc.imagej.net/ImgLib2/net/imglib2/IterableInterval.html) (values and their location) or their corresponding interfaces for real-valued locations [RealRandomAccessible](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealRandomAccessible.html), [RealRandomAccessibleRealInterval](http://javadoc.imagej.net/ImgLib2/net/imglib2/RealRandomAccessibleRealInterval.html) and [IterableRealInterval](http://javadoc.imagej.net/ImgLib2/net/imglib2/IterableRealInterval.html). Note that you can concatenate them if you need more than one property.",
                "* **Dimensionality**: Usually there is no reason to restrict an algorithm to a certain dimensionality (like only for two-dimensional images), at least we could not really come up with a convincing example. *If the application or plugin you are developing addresses a certain dimensionality (e.g. stitching of panorama photos) it is understandable that you do not want to implement everything n-dimensionally. But try to implement as many as possible of the smaller algorithm you are using as generic, n-dimensional methods. For example, everything that requires only to **iterate** the data is usually inherently n-dimensional.*",
                "",
                "Following those ideas, your newly-implemented algorithm will be applicable to any kind of data and dimensionality it is defined for, not only a very small domain you are currently working with. Also note that quite often this actually makes the implementation simpler."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeGB53Md",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "// Behind a firewall? Configure your proxy settings here.",
                    "//systemProperties = System.getProperties()",
                    "//systemProperties.setProperty(\"http.proxyHost\",\"myproxy.domain\")",
                    "//systemProperties.setProperty(\"http.proxyPort\",\"8080\")",
                    "",
                    "//////////////////////////////////////////////////////////////",
                    "// Load ImageJ. This may take some minutes the first time   //",
                    "// while ImageJ is installed into ~/.groovy/grapes locally. //",
                    "//////////////////////////////////////////////////////////////",
                    "@GrabResolver(name='imagej', root='http://maven.imagej.net/content/groups/public/')",
                    "@Grab('net.imagej:imagej:2.0.0-rc-58')",
                    "import net.imagej.ImageJ",
                    "ij = new ImageJ()",
                    "println(\"ImageJ is ready to go.\")"
                ]
            },
            "output": {
                "state": {},
                "result": "script1481060039519353746837$1@412a12aa",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "7b382466-2568-41b9-9f09-2ffcdaa8bf87",
                "elapsedTime": 2669,
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 45
        },
        {
            "id": "sectionK2rrg9",
            "type": "section",
            "title": "Min/Max search",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownZ2C71U",
            "type": "markdown",
            "body": [
                "Searching for the minimal and maximal value in a dataset is a very nice example to illustrate generic algorithms. In order to find min/max values, [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html)s only need to be able to compare themselves. Therefore we do not need any numeric values, we only require them to implement the (Java) interface [Comparable](https://docs.oracle.com/javase/7/docs/api/java/lang/Comparable.html). Additionally, no random access to the data is required, we simply need to iterate all pixels, also their location is irrelevant. The image data we need only needs to be [Iterable](http://javadoc.imagej.net/Java/java/lang/Iterable.html?is-external=true).",
                "",
                "Below we show **three** small variations of the min/max search. ",
                "* First, in Example 3a, we show the implementation as described above. ",
                "* Second, in Example 3b, we illustrate that this also works on a standard Java ArrayList. ",
                "* Third, in Example 3c, we show how the implementation changes if we do not only want the min/max value, but also their location. This requires to use [IterableInterval](http://javadoc.imagej.net/ImgLib2/net/imglib2/IterableInterval.html) instead, as [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html) can return their location."
            ],
            "evaluatorReader": false
        },
        {
            "id": "sectionw3ctJG",
            "type": "section",
            "title": "Example 3a",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "codeUNJ7JX",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imglib2.type.Type",
                    "",
                    "construct01 = new Object() {   ",
                    "  /**",
                    "   * Compute the min and max for any {@link Iterable}, like an {@link Img}.",
                    "   *",
                    "   * The only functionality we need for that is to iterate. Therefore we need no {@link Cursor}",
                    "   * that can localize itself, neither do we need a {@link RandomAccess}. So we simply use the",
                    "   * most simple interface in the hierarchy.",
                    "   *",
                    "   * @param input - the input that has to just be {@link Iterable}",
                    "   * @param min - the type that will have min",
                    "   * @param max - the type that will have max",
                    "   */",
                    "  public <T extends Comparable< T> & Type<T>> void computeMinMax(Iterable<T> input, T min, T max) {",
                    "    // create a cursor for the image (the order does not matter)",
                    "    Iterator<T> iterator = input.iterator()",
                    "    ",
                    "    // initialize min and max with the first image value",
                    "    T type = iterator.next()",
                    "    ",
                    "    min.set(type)",
                    "    max.set(type)",
                    "    ",
                    "    // loop over the rest of the data and determine min and max value",
                    "    while (iterator.hasNext()) {",
                    "      // we need this type more than once",
                    "      type = iterator.next()",
                    "      ",
                    "      if (type.compareTo(min) < 0) {",
                    "        min.set( type )",
                    "      }",
                    "      ",
                    "      if (type.compareTo(max) > 0) {",
                    "        max.set(type);",
                    "      }",
                    "    }",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": "script14810602936601520805778$1@796fef2b",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "7b382466-2568-41b9-9f09-2ffcdaa8bf87",
                "elapsedTime": 610,
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 39
        },
        {
            "id": "code1dfC79",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import io.scif.img.ImgOpener",
                    "import net.imglib2.type.numeric.real.FloatType",
                    "",
                    "/**",
                    " * Perform a generic min & max search",
                    " *",
                    " * @author Stephan Preibisch & Stephan Saalfeld",
                    " *",
                    " */",
                    "",
                    "// open with ImgOpener",
                    "img = new ImgOpener().openImgs(\"http://samples.fiji.sc/tutorials/DrosophilaWing.tif\", new FloatType()).get(0)",
                    "",
                    "// create two empty variables",
                    "min = img.firstElement().createVariable()",
                    "max = img.firstElement().createVariable()",
                    "",
                    "// compute min and max of the Image",
                    "construct01.computeMinMax(img, min, max)",
                    "",
                    "System.out.println(\"minimum Value (img): \" + min)",
                    "System.out.println(\"maximum Value (img): \" + max)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "err",
                            "value": "[INFO] Reading IFDs\n[INFO] Populating metadata\n[INFO] Checking comment style\n[WARNING] Expected positive value for PhysicalSizeX; got 0.0\n[WARNING] Expected positive value for PhysicalSizeY; got 0.0\n[WARNING] Expected positive value for PhysicalSizeX; got 0.0\n[WARNING] Expected positive value for PhysicalSizeY; got 0.0\n"
                        },
                        {
                            "type": "out",
                            "value": "minimum Value (img): 42.0\nmaximum Value (img): 255.0\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "7b382466-2568-41b9-9f09-2ffcdaa8bf87",
                "elapsedTime": 3286,
                "height": 183
            },
            "evaluatorReader": true,
            "lineCount": 22
        },
        {
            "id": "sectionZZWifn",
            "type": "section",
            "title": "Example 3b",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownQlYXy7",
            "type": "markdown",
            "body": [
                "Note that this example works just the same way if the input is not an [Img](http://javadoc.imagej.net/ImgLib2/net/imglib2/img/Img.html), but for example just a standard Java [ArrayList](https://docs.oracle.com/javase/7/docs/api/java/util/ArrayList.html)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codefjW8SJ",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import java.util.ArrayList",
                    "import net.imglib2.type.numeric.real.FloatType",
                    " ",
                    "/**",
                    " * Perform a generic min & max search",
                    " *",
                    " * @author Stephan Preibisch & Stephan Saalfeld",
                    " *",
                    " */",
                    "",
                    "// it will work as well on a normal ArrayList",
                    "ArrayList<FloatType> list = new ArrayList<FloatType>()",
                    "",
                    "// put values 0 to 10 into the ArrayList",
                    "for (int i = 0; i <= 10; ++i) {",
                    "  list.add(new FloatType(i))",
                    "}",
                    "",
                    "// create two empty variables",
                    "min = new FloatType()",
                    "max = new FloatType()",
                    " ",
                    "// compute min and max of the ArrayList",
                    "construct01.computeMinMax(list, min, max)",
                    "",
                    "System.out.println(\"minimum Value (arraylist): \" + min)",
                    "System.out.println(\"maximum Value (arraylist): \" + max)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "minimum Value (arraylist): 0.0\nmaximum Value (arraylist): 10.0\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "7b382466-2568-41b9-9f09-2ffcdaa8bf87",
                "elapsedTime": 598,
                "height": 71
            },
            "evaluatorReader": true,
            "lineCount": 27
        },
        {
            "id": "sectionRRu5Oy",
            "type": "section",
            "title": "Example 3c",
            "level": 3,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownm1zx2E",
            "type": "markdown",
            "body": [
                "If we want to compute the location of the minimal and maximal pixel value, an [Iterator](http://javadoc.imagej.net/ImgLib2/net/imglib2/Iterator.html) will not be sufficient as we need location information. Instead, the location search will demand an [IterableInterval](http://javadoc.imagej.net/ImgLib2/net/imglib2/IterableInterval.html) as input data which can create [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html)s. Apart from that, the algorithm looks quite similar. Note that we do not use a **LocalizingCursor** but only a [Cursor](http://javadoc.imagej.net/ImgLib2/net/imglib2/Cursor.html); the location happens only when a new maximal or minimal value has been found while iterating the data."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeUtGVZu",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imglib2.type.Type",
                    "import net.imglib2.IterableInterval",
                    "import net.imglib2.Point",
                    "import net.imglib2.Cursor",
                    " ",
                    "/**",
                    " * Perform a generic min/max search.",
                    " *",
                    " * @author Stephan Preibisch & Stephan Saalfeld",
                    " *",
                    " */",
                    "construct02 = new Object() {",
                    "  /**",
                    "   * Compute the location of the minimal and maximal intensity for any IterableInterval,",
                    "   * like an {@link Img}.",
                    "   *",
                    "   * The functionality we need is to iterate and retrieve the location. Therefore we need a",
                    "   * Cursor that can localize itself.",
                    "   * Note that we do not use a LocalizingCursor as localization just happens from time to time.",
                    "   *",
                    "   * @param input - the input that has to just be {@link IterableInterval}",
                    "   * @param minLocation - the location for the minimal value",
                    "   * @param maxLocation - the location of the maximal value",
                    "   */",
                    "  public <T extends Comparable<T> & Type<T>> void computeMinMaxLocation(IterableInterval<T> input, Point minLocation, Point maxLocation) {",
                    "    // create a cursor for the image (the order does not matter)",
                    "    final Cursor<T> cursor = input.cursor()",
                    "    ",
                    "    // initialize min and max with the first image value",
                    "    T type = cursor.next()",
                    "    T min = type.copy()",
                    "    T max = type.copy()",
                    "    ",
                    "    // loop over the rest of the data and determine min and max value",
                    "    while (cursor.hasNext()) {",
                    "      // we need this type more than once",
                    "      type = cursor.next()",
                    "      ",
                    "      if (type.compareTo(min) < 0) {",
                    "        min.set(type)",
                    "        minLocation.setPosition(cursor)",
                    "      }",
                    "      ",
                    "      if (type.compareTo(max) > 0) {",
                    "        max.set(type)",
                    "        maxLocation.setPosition(cursor)",
                    "      }",
                    "    }",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": "script1481060424496252008877$1@73f2273b",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "7b382466-2568-41b9-9f09-2ffcdaa8bf87",
                "elapsedTime": 600,
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 50
        },
        {
            "id": "codeVBo2G9",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import io.scif.img.ImgOpener",
                    "import net.imglib2.type.numeric.real.FloatType",
                    "import net.imglib2.Point",
                    "",
                    "// open with ImgOpener",
                    "img = new ImgOpener().openImgs(\"http://samples.fiji.sc/tutorials/DrosophilaWing.tif\", new FloatType()).get(0)",
                    " ",
                    " // create two location objects",
                    " locationMin = new Point(img.numDimensions())",
                    " locationMax = new Point(img.numDimensions())",
                    " ",
                    " // compute location of min and max",
                    " construct02.computeMinMaxLocation(img, locationMin, locationMax)",
                    " ",
                    " System.out.println(\"location of minimum Value (img): \" + locationMin)",
                    " System.out.println(\"location of maximum Value (img): \" + locationMax)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "err",
                            "value": "[INFO] Reading IFDs\n[INFO] Populating metadata\n[INFO] Checking comment style\n[WARNING] Expected positive value for PhysicalSizeX; got 0.0\n[WARNING] Expected positive value for PhysicalSizeY; got 0.0\n[WARNING] Expected positive value for PhysicalSizeX; got 0.0\n[WARNING] Expected positive value for PhysicalSizeY; got 0.0\n"
                        },
                        {
                            "type": "out",
                            "value": "location of minimum Value (img): (545,25)\nlocation of maximum Value (img): (51,0)\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "7b382466-2568-41b9-9f09-2ffcdaa8bf87",
                "elapsedTime": 586,
                "height": 183
            },
            "evaluatorReader": true,
            "lineCount": 16
        },
        {
            "id": "section9bqVrv",
            "type": "section",
            "title": "Computing average",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownBoF4Zu",
            "type": "markdown",
            "body": [
                "In a very similar way, one can compute the average intensity for image data. Note that we restrict the [Type](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/Type.html) of data to [RealType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/RealType.html). In theory, we could use [NumericType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/NumericType.html) as it offers the possibility to add up values. However, we cannot ensure that [NumericType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/NumericType.html) provided is capable of adding up millions of pixels without overflow. And even if we would ask for a second [NumericType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/NumericType.html) that is capable of adding values up, it might still have numerical instabilities. Note that actually every Java native type has those instabilities. Therefore we use the [RealSum](http://javadoc.imagej.net/ImgLib2/net/imglib2/util/RealSum.html) class that offers correct addition of even very large amounts of pixels. As this implementation is only available for double values, we restrict the method here to [RealType](http://javadoc.imagej.net/ImgLib2/net/imglib2/type/numeric/RealType.html)."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeuKSmMY",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import net.imglib2.type.numeric.RealType",
                    "import net.imglib2.util.RealSum",
                    " ",
                    "/**",
                    " * Perform a generic computation of average intensity",
                    " *",
                    " * @author Stephan Preibisch & Stephan Saalfeld",
                    " *",
                    " */",
                    "construct03 = new Object() {",
                    "  /**",
                    "   * Compute the average intensity for an {@link Iterable}.",
                    "   *",
                    "   * @param input - the input data",
                    "   * @return - the average as double",
                    "   */",
                    "  public <T extends RealType<T>> double computeAverage(Iterable<T> input) {",
                    "    // Count all values using the RealSum class.",
                    "    // It prevents numerical instabilities when adding up millions of pixels",
                    "    realSum = new RealSum()",
                    "    count = 0",
                    "    ",
                    "    for (T type : input) {",
                    "      realSum.add(type.getRealDouble())",
                    "      ++count;",
                    "    }",
                    "    ",
                    "    return realSum.getSum() / count",
                    "  }",
                    "}"
                ]
            },
            "output": {
                "state": {},
                "result": "script1481060593400751430586$1@448e1ec",
                "selectedType": "Text",
                "pluginName": "Groovy",
                "shellId": "7b382466-2568-41b9-9f09-2ffcdaa8bf87",
                "elapsedTime": 1146,
                "height": 56
            },
            "evaluatorReader": true,
            "lineCount": 30
        },
        {
            "id": "code0FU2m0",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "import io.scif.img.ImgOpener",
                    "import net.imglib2.type.numeric.real.FloatType",
                    "",
                    "// open with ImgOpener",
                    "img = new ImgOpener().openImgs(\"http://samples.fiji.sc/tutorials/DrosophilaWing.tif\", new FloatType()).get(0)",
                    " ",
                    "// compute average of the image",
                    "avg = construct03.computeAverage(img)",
                    "System.out.println(\"average Value: \" + avg)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "err",
                            "value": "[INFO] Reading IFDs\n[INFO] Populating metadata\n[INFO] Checking comment style\n[WARNING] Expected positive value for PhysicalSizeX; got 0.0\n[WARNING] Expected positive value for PhysicalSizeY; got 0.0\n[WARNING] Expected positive value for PhysicalSizeX; got 0.0\n[WARNING] Expected positive value for PhysicalSizeY; got 0.0\n"
                        },
                        {
                            "type": "out",
                            "value": "average Value: 233.45769361413045\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Groovy",
                "shellId": "7b382466-2568-41b9-9f09-2ffcdaa8bf87",
                "elapsedTime": 1232,
                "height": 167
            },
            "evaluatorReader": true,
            "lineCount": 9
        }
    ],
    "namespace": {}
}
